OK

[Abstract Syntax]

Program [FnDef Int (Ident "main") [] (Block [Decl Int [Init (Ident "a") (ELitInt 5)],Decl Int [Init (Ident "b") (ELitInt 6)],Decl Int [NoInit (Ident "c")],CondElse (ERel (EVar (Ident "a")) LTH (EVar (Ident "b"))) (BStmt (Block [Ass (Ident "c") (ELitInt 400)])) (BStmt (Block [Ass (Ident "c") (ELitInt 1234)])),Incr (Ident "c")])]
declare i32 @main() {
; <label>:0:
	Alloca (LLVMVariable {type' = Int, address = LLVMAddressRegister 1, blockLabel = 0, ident = Just (Ident "a")})
	MemoryStore (LLVMVariable {type' = Int, address = LLVMAddressImmediate 5, blockLabel = 0, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 1, blockLabel = 0, ident = Just (Ident "a")})
	Alloca (LLVMVariable {type' = Int, address = LLVMAddressRegister 2, blockLabel = 0, ident = Just (Ident "b")})
	MemoryStore (LLVMVariable {type' = Int, address = LLVMAddressImmediate 6, blockLabel = 0, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 2, blockLabel = 0, ident = Just (Ident "b")})
	Alloca (LLVMVariable {type' = Int, address = LLVMAddressRegister 3, blockLabel = 0, ident = Just (Ident "c")})
	MemoryStore (LLVMVariable {type' = Int, address = LLVMAddressImmediate 0, blockLabel = 0, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 3, blockLabel = 0, ident = Just (Ident "c")})
	Load (LLVMVariable {type' = Int, address = LLVMAddressRegister 4, blockLabel = 0, ident = Just (Ident "a")}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 1, blockLabel = 0, ident = Just (Ident "a")})
	Load (LLVMVariable {type' = Int, address = LLVMAddressRegister 5, blockLabel = 0, ident = Just (Ident "b")}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 2, blockLabel = 0, ident = Just (Ident "b")})
	Operation (LLVMVariable {type' = Int, address = LLVMAddressRegister 4, blockLabel = 0, ident = Just (Ident "a")}) (RelBinOp LTH) (LLVMVariable {type' = Int, address = LLVMAddressRegister 5, blockLabel = 0, ident = Just (Ident "b")}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 6, blockLabel = 0, ident = Nothing})
	BranchConditional (LLVMVariable {type' = Int, address = LLVMAddressRegister 6, blockLabel = 0, ident = Nothing}) 1 2
; <label>:1:
	MemoryStore (LLVMVariable {type' = Int, address = LLVMAddressImmediate 400, blockLabel = 1, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 3, blockLabel = 0, ident = Just (Ident "c")})
	Branch 3
; <label>:2:
	MemoryStore (LLVMVariable {type' = Int, address = LLVMAddressImmediate 1234, blockLabel = 2, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 3, blockLabel = 0, ident = Just (Ident "c")})
	Branch 3
; <label>:3:
	Load (LLVMVariable {type' = Int, address = LLVMAddressRegister 7, blockLabel = 3, ident = Just (Ident "c")}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 3, blockLabel = 0, ident = Just (Ident "c")})
	Operation (LLVMVariable {type' = Int, address = LLVMAddressRegister 7, blockLabel = 3, ident = Just (Ident "c")}) (AddBinOp Plus) (LLVMVariable {type' = Int, address = LLVMAddressImmediate 1, blockLabel = 3, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 8, blockLabel = 3, ident = Nothing})
	MemoryStore (LLVMVariable {type' = Int, address = LLVMAddressRegister 8, blockLabel = 3, ident = Nothing}) (LLVMVariable {type' = Int, address = LLVMAddressRegister 3, blockLabel = 0, ident = Just (Ident "c")})
