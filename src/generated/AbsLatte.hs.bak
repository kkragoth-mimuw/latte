-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsLatte where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDef Type Ident [Arg] Block
    | ClassDef Ident [ClassPole]
    | ClassDefExt Ident Ident [ClassPole]
  deriving (Eq, Ord, Show, Read)

data ClassPole
    = ClassFieldDef Type Ident | ClassMethodDef Type Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass LValue Expr
    | Incr LValue
    | Decr LValue
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | ForArray Type Ident Ident
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit LValue | Init LValue Expr
  deriving (Eq, Ord, Show, Read)

data LValue
    = LValue Ident
    | LValueClassField LValue Ident
    | LValueArrayElem LValue Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Boolean
    | Void
    | ArrType Type
    | ClassType Ident
    | Fun Type [Type]
  deriving (Eq, Ord, Show, Read)

data Expr
    = EField LValue
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp LValue [Expr]
    | EString String
    | ENewArray Type Expr
    | ENew Type
    | ECast Type
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

